#!/bin/bash

cowrie_ARM_install()
{
	(
		echo "10"; sleep 1
		#Cowrie x86 installation ->
		#Install pre-requirements
		sudo apt install apt-utils
		sudo apt-get install -y git apt-utils python-virtualenv libssl-dev libffi-dev build-essential libpython-dev python2.7-minimal authbind libpcap-dev libpq-dev python3-wheel python-wheel-common python3-setuptools
		echo "40"; sleep 1
		pip install --upgrade pip
		pip install --upgrade -r /home/pi/iothoneypot/cowrie_requirements.txt
		#Uncomment the next 2 lines only if cowrie docker installation fails.
		#pip3 install pycparser setuptools pendulum
		#python -m pip install --upgrade pip setuptools wheel
		echo "70"; sleep 1
		#Download Cowrie
		sudo git clone https://github.com/cowrie/docker-cowrie.git
		echo "80"; sleep 1
		#Compile cowrie
		sudo docker build -t cowrie /home/pi/iothoneypot/docker-cowrie
		echo "90";
		#Run cowrie in the background and in a container listen in port 22, and redirected to port 2222 inside container
    #sudo docker run -d --publish 22:2222/tcp cowrie
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="Cowrie installation" \
       		 --text="Installing Cowrie. Patience, this could take 30 min. approx." \
       		 --percentage=0
		check_error 'Cowrie installation'
	)
}


cowrie_install_virtual_env()
{
	(
		echo "5"; sleep 1
		if [ -d /home/pi/iothoneypot/docker-cowrie ]
			then
				#Remove docker-cowrie folder
				sudo rm -Rf /home/pi/iothoneypot/docker-cowrie
		fi
		echo "10"; sleep 1
		#Install pre-requirements
		sudo apt-get install -y git python-virtualenv libssl-dev libffi-dev build-essential libpython3-dev python3-minimal authbind virtualenv
		#create cowrie user
		yes 'Y ' | sudo adduser --disabled-password cowrie
		#Redirect fake port 22 to real port (user selected)
		sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port $NEW_PORT
		#Change to user cowrie
		sudo su - cowrie
		echo "20"; sleep 1
		#Download Cowrie
		git clone http://github.com/cowrie/cowrie
		cd cowrie
		#Set up Python Virtual Environment
		virtualenv --python=python3 cowrie-env
		#Activate Python virtual environment
		source cowrie-env/bin/activate
		pip install --upgrade pip
		pip install --upgrade -r requirements.txt
		echo "60"; sleep 1
		# Backup cowrie.cfg.dist to cowrie.cfg. The latter takes precedence over the other. Rename userdb to .txt for ssh honeypot access user/passwords.
		cp etc/cowrie.cfg.dist etc/cowrie.cfg && mv etc/userdb.example etc/userdb.txt
		echo "70"; sleep 1
		#Start Cowrie
		bin/cowrie start
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="Cowrie installation" \
       		 --text="Installing Cowrie" \
       		 --percentage=0
		check_error 'Cowrie installation'
	)
}

cowrie_config_virtual_env()
{
	(
		echo "40"; sleep 1
		# Edit userdb.txt and change root password to toor.
		sed -i 's/root:x:!\/honeypot.*/root:x:!admin/' etc/userdb.txt
		sed -i 's/root:x:\*.*/root:x:toor/g' etc/userdb.txt
		#Edit cowrie config file.
		#...to enable TELNET honeypot, port 23, uncomment the next line:
		#sed -i '/# Enable Telnet support, disabled by default/{n;s/enable.*/enabled = true/}' etc/cowrie.cfg
		echo "50"; sleep 1
		#...to enable SPLUNK forwarding in output_splunk section:
		#Line 1. Remove the # from the output_splunk line.
		sed -i 's/#\[output_splunk\]/\[output_splunk\]/' etc/cowrie.cfg
		#Line 2. Enable Splunk
		sed -i '/output_splunk/{n;s/#enabled.*/enabled = true/}' etc/cowrie.cfg
		echo "60"; sleep 1
		#Line 3. Change localhost to the remote server address where Splunk is installed and running.
		sed -i '/output_splunk/{n;n;s/#url = https:\/\/localhost:8088\/services.*$/url = https:\/\/34.243.135.52:8088\/services\/collector\/event/}' etc/cowrie.cfg
		echo "70"; sleep 1
		#Line 4. Update the Token value from the HTTP event collector in Splunk remote server.
		sed -i '/output_splunk/{n;n;n;s/#token = 6A0EA6C6.*$/token = e34313c8-05ad-4507-b507-4442c29c0a9f/}' etc/cowrie.cfg
		echo "80"; sleep
		#Lines 5, 6 and 7. Remove the #
		sed -i '/output_splunk/{n;n;n;n;s/#index.*/index = cowrie/}' etc/cowrie.cfg
		sed -i '/output_splunk/{n;n;n;n;n;s/#sourcetype.*/sourcetype = cowrie/}' etc/cowrie.cfg
		sed -i '/output_splunk/{n;n;n;n;n;n;s/#source.*/source = cowrie/}' etc/cowrie.cfg
		exit
		bin/cowrie restart
		echo "90";
	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="Cowrie configuration" \
       			--text="Configuring Cowrie." \
       			--percentage=0
		check_error 'Cowrie configuration'
	)
}

RIOT_docker_install()
# Install and configure RIOT (docker version)
{
	(
		echo "10"; sleep 1
		#if RIOT folder exists, remove it first
		if [ -d /home/pi/iothoneypot/RIOT ]
			then
				#Remove RIOT folder
				rm -Rf /home/pi/iothoneypot/RIOT
			fi
			echo "50"; sleep 1
			#Start RIOT docker version. ARM toolchain is missing. If found, install and run the next line.
			#sudo make BUILD_IN_DOCKER=1 DOCKER="sudo docker"
			echo "90";
			#Run RIOT in the background and in a container listen in USER selected PORT, and redirected to port 9999 inside container
			#sudo sh -c "docker run --publish $IOT_PORT:9999/tcp riot > /var/log/riot_run.log 2>&1 &"
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="RIOT installation" \
       		 --text="Installing RIOT" \
       		 --percentage=0
		check_error 'RIOT installation'
	)
}

RIOT_docker_iot_devices()
#Installation and configuration of two virtual IoT devices in RIOT docker version.
{
	(
		echo "10"; sleep 1
		#Get the container ID from RIOT instance
		printf "Getting container ID.\n"; containerid2=$(sudo docker ps | sed -n '3 p' | sed 's/^\(............\).*/\1/;q')
		printf "Container ID is: $containerid2\n"
		sleep 5
		echo "30"; sleep 1
		#
		#Execute commands INSIDE the container:
		#
		#***************** IMPORTANT -> CHECK the correct RIOT FOLDERS in the next lines *********************.
		#
		#1) Copy IoT folder (GitHub) to RIOT instance (inside the container)
		printf "Changing permissions to IoT folder \n"; chown pi:pi -R /home/pi/iothoneypot/IoT_Honeypot #Files/Folders should be "not root" in order to use inside containers (also not root in the cowrie docker)
		printf "Copying files into the container\n"; docker cp /home/pi/iothoneypot/IoT_Honeypot $containerid2:/home/RIOT/IoT_Honeypot #copy local folder containing the custom made main.c inside container. IMPORTANT -> USE the correct RIOT FOLDER inside container.
		echo "20"; sleep 1
		#2) Compile IoT devices using the copied folder (inside container)
		printf "Compiling custom made RIOT main.c inside container\n"; docker exec -w /home/RIOT/IoT_Honeypot $containerid2 make #IMPORTANT -> USE the correct RIOT FOLDER inside container.
		echo "50"; sleep 1
		#3) Create interfaces for IoT devices (inside container)
		printf "Creating interfaces (IPv6) inside container\n"; docker exec -w /home/pi/iothoneypot/RIOT/dist/tools/tapsetup/ $containerid2 tapsetup -c #IMPORTANT -> USE the correct RIOT FOLDER inside container.
		echo "70"; sleep 1
		#4) ADD aliases to Bashrc to fast execution of tap devices (IoT devices), INSIDE the container:
		#Backup .Bashrc
		printf "Bashrc backup\n"; docker exec $containerid2 cp /home/pi/.bashrc /home/pi/.bashrc.bak #IMPORTANT -> USE the correct RIOT FOLDER inside container.
		#Add aliasses
		printf "Adding alias for tap0\n"; docker exec -w /home/pi/ $containerid2 printf "alias tap0='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0'" >> .bashrc #IMPORTANT -> USE the correct RIOT FOLDER inside container.
		printf "Adding alias for tap0\n"; docker exec -w /home/pi/ $containerid2 printf "alias tap1='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1'" >> .bashrc #IMPORTANT -> USE the correct RIOT FOLDER inside container.
		echo "90";
	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="IoT devices configuration" \
       			--text="Installing and configuring IoT Virtual Devices" \
       			--percentage=0
		check_error 'IoT devices Installation'
	)
}

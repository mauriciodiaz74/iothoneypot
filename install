#!/bin/bash

#19-05-20_17:48
#Variables
FILE=`dirname $0`/README
MACHINE_TYPE=`uname -m`
USER=`whoami`
TOP_MARGIN=30
RIGHT_MARGIN=20
SCREEN_WIDTH=$(xwininfo -root | sed -n 's/.*Width: //p')
SCREEN_HEIGHT=$(xwininfo -root | sed -n 's/.*Height: //p')
W=$(( $SCREEN_WIDTH / 2 - $RIGHT_MARGIN ))
H=$(( $SCREEN_HEIGHT - 2 * $TOP_MARGIN ))

#Clean terminal
clear

logging()
{
	#Log all commands output
	logging=/var/log/iothoneypot_install.log
	mkfifo ${logging}.pipe
	tee < ${logging}.pipe $logging &
	exec &> ${logging}.pipe
	rm ${logging}.pipe
}

check_sudo()
{
	#Check if the script was started by a sudo user. If not EXIT.
	if (( $EUID != 0 ))
		then
			echo
			echo "WARNING:"
			echo "To use this script, you need to run it as sudo"
			echo "Please use: <sudo ./install>"
			echo
		exit
	fi
}

check_platform()
{
	#Check if the platform is supported. If not EXIT.
	if [ ${MACHINE_TYPE} != 'armv7l' ]
		then
			echo
			echo "WARNING:"
			echo "This program do not support this plattform"
			echo "Visit http://www.darkdefense.net/own/iothoneypot/supported"
			echo "Sorry..."
			echo
		exit
	fi
}

check_error()
{
	if [ "$?" -ne 0 ]
		then
       			zenity --error \
			      			 --width=300 \
									 --height=50 \
       						 --text="$1. Operation canceled."
						exit 1
	fi
}

activate_ssh()
{
	(
		echo "20"; sleep 1
		#Enable SSH. By default is closed in Rapsberry Pi.
		systemctl enable ssh
		echo "50"; sleep 1
		echo "70"; sleep 1
		echo "90";
		systemctl start ssh
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="SSH service" \
       		 --text="Enabling and starting SSH service..." \
       		 --percentage=0
		check_error 'SSH activation'
	)
}

modify_ssh_port()
{
	NEW_PORT=$(zenity --scale --width=300 --title="New SSH port" --text="Please select the new port where the real SSH service will be listening" --min-value=1000 --max-value=65535 --value=1000 --step=1)
	#Modify sshd_config file to change default ssh port 22, to user selected port.
	sed -i 's/#Port/Port/g' /etc/ssh/sshd_config
	sed -i "s/Port.*/Port $NEW_PORT/g" /etc/ssh/sshd_config
	#Restart SSH service to apply port change
	service ssh restart
	#Show the new SSH port
	ss -tlpn | grep ssh | (zenity --text-info --title="SSH port confirmation" --width 1000
		if [ "$?" = 1 ]
			then modify_ssh_port
		fi
	)
}

update_upgrade()
{
	(
		echo "50"; sleep 1
		#Update system repositories
		sudo apt-get update
		echo "30"; sleep 1
		echo "60"; sleep 1
		#Upgrade packages
		sudo apt-get -y upgrade
		echo "90";
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="Updating" \
       		 --text="Updating repositories..." \
       		 --percentage=0
		check_error 'Update'
	)
}

docker_install()
{
	(
		echo "10"; sleep 1
		#Check if docker is installed
		if [ -x "$(command -v docker)" ]
			then
    				#Stop and remove all docker containers images and volumes, and uninstall previous docker versions
						sudo docker container stop $(sudo docker container ls -aq)
						echo "10"; sleep 1
						sudo docker container prune --force
						sudo docker image prune --all --force
    				sudo docker system prune --all --force --volumes
						echo "20"; sleep 1
						sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli containerd runc
						sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce
						echo "30"; sleep 1
						sudo rm -Rf /var/lib/docker /etc/docker
						sudo rm -Rf /etc/apparmor.d/docker
						sudo rm -Rf /var/run/docker.sock
						sudo groupdel docker
    	fi
		echo "40"; sleep 1
		#Download docker installer script
		curl -fsSL https://get.docker.com -o get-docker.sh
		echo "50"; sleep 1
		#Run docker installer script
		sudo sh get-docker.sh
		echo "60"; sleep 1
		#Add current user to docker group
		sudo usermod -aG docker ${USER}
		echo "90";
		#Enable docker to start on boot with systemd
		sudo systemctl enable docker
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="Docker installation" \
       		 --text="Installing and configuring Docker..." \
       		 --percentage=0
		check_error 'Docker'
	)
	#Run Docker hello-world to test docker installation
	sudo docker run hello-world | zenity 	--text-info --width=900 --height=300 --title="Testing Docker"
}

set -x  #Activate debugging from here

cowrie_ARM_install()
{
	(
		echo "10"; sleep 1
		#Download cowrie ARM version (jheredia cowrie docker)
		echo "debug docker pull:"; docker pull jtorresheredia/cowrie-arm
		echo "90"; sleep 1
		echo "debug docker run:"; docker run -d -p 22:2222/tcp jtorresheredia/cowrie-arm &
		#Cowrie x86 installation ->
		#Install pre-requirements
		#sudo apt install apt-utils
		#sudo apt-get install -y git apt-utils python-virtualenv libssl-dev libffi-dev build-essential libpython-dev python2.7-minimal authbind libpcap-dev libpq-dev python3-wheel python-wheel-common python3-setuptools
		#echo "40"; sleep 1
		#pip install --upgrade pip
		#pip install --upgrade -r /home/pi/iothoneypot/cowrie_requirements.txt
		#Uncomment the next 2 lines only if cowrie docker installation fails.
		#pip3 install pycparser setuptools pendulum
		#python -m pip install --upgrade pip setuptools wheel
		#echo "70"; sleep 1
		#Download Cowrie
		#sudo git clone https://github.com/cowrie/docker-cowrie.git
		#echo "80"; sleep 1
		#Compile cowrie
		#sudo docker build -t cowrie /home/pi/iothoneypot/docker-cowrie
		#echo "90";
		#Run cowrie in the background and in a container listen in port 22, and redirected to port 2222 inside container
    #MD: -> Try one of the next 3. If the last one works, use that.
		#sudo docker run --publish 22:2222/tcp cowrie > output.log 2>&1 &
		#sudo sh -c "docker run --publish 22:2222/tcp cowrie > output.log 2>&1 &"
		#sudo docker run -d --publish 22:2222/tcp cowrie
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="Cowrie installation" \
       		 --text="Installing Cowrie. Patience, this could take 45 min. approx." \
       		 --percentage=0
		check_error 'Cowrie installation'
	)
}

cowrie_ARM_config()
{
	(
		echo "10"; sleep 1
		#Install adn enable telnet
		##sudo apt-get -y install telnetd
		##sudo /etc/init.d/openbsd-inetd restart
		echo "20"; sleep 1
		#Get the container ID from cowrie instance
		containerid=$(sudo docker ps | sed -n '2 p' | sed 's/^\(............\).*/\1/;q')
		echo "30"; sleep 1
		#Connect to a bash session inside cowrie docker instance
		sudo docker exec -it $containerid /bin/bash
		echo "40"; sleep 1
		# Backup cowrie.cfg.dist to cowrie.cfg. The latter takes precedence over the other. Rename userdb to .txt for ssh honeypot access user/passwords.
		cp etc/cowrie.cfg.dist etc/cowrie.cfg && mv etc/userdb.example etc/userdb.txt
		# Edit userdb.txt and change some too much obvious passwords.
		sed -i 's/root:x:!\/honeypot.*/root:x:!admin/' etc/userdb.txt
		sed -i 's/root:x:\*.*/root:x:toor/g' etc/userdb.txt
		#Edit cowrie config file.
		#...to enable TELNET honeypot, port 23, uncomment the next line:
		#sed -i '/# Enable Telnet support, disabled by default/{n;s/enable.*/enabled = true/}' etc/cowrie.cfg
		echo "50"; sleep 1
		#...to enable SPLUNK forwarding in output_splunk section:
		#Line 1. Remove the # from the output_splunk line.
		sed -i 's/#\[output_splunk\]/\[output_splunk\]/' etc/cowrie.cfg
		#Line 2. Enable Splunk
		sed -i '/output_splunk/{n;s/#enabled.*/enabled = true/}' etc/cowrie.cfg
		echo "60"; sleep 1
		#Line 3. Change localhost to the remote server address where Splunk is installed and running.
		sed -i '/output_splunk/{n;n;s/#url = https:\/\/localhost:8088\/services.*$/url = https:\/\/34.243.135.52:8088\/services\/collector\/event/}' etc/cowrie.cfg
		echo "70"; sleep 1
		#Line 4. Update the Token value from the HTTP event collector in Splunk remote server.
		sed -i '/output_splunk/{n;n;n;s/#token = 6A0EA6C6.*$/token = e34313c8-05ad-4507-b507-4442c29c0a9f/}' etc/cowrie.cfg
		echo "80"; sleep 1
		#Lines 5, 6 and 7. Remove the #
		sed -i '/output_splunk/{n;n;n;n;s/#index.*/index = cowrie/}' etc/cowrie.cfg
		sed -i '/output_splunk/{n;n;n;n;n;s/#sourcetype.*/sourcetype = cowrie/}' etc/cowrie.cfg
		sed -i '/output_splunk/{n;n;n;n;n;n;s/#source.*/source = cowrie/}' etc/cowrie.cfg
		exit
		sudo docker restart $containerid
		echo "90";
	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="Cowrie configuration" \
       			--text="Configuring Cowrie." \
       			--percentage=0
		check_error 'Cowrie configuration'
	)
}

set +x #Stop debugging from here

RIOT_iot_port()
{
	IOT_PORT=$(zenity --scale --width=300 --title="First IoT device port" --text="Please select the port where one of the IoT devices will be listening" --min-value=1000 --max-value=65535 --value=1000 --step=1
		if [ "$?" = 1 ]
			then RIOT_iot_port
		fi
	)
}

RIOT_install()
{
	(
		echo "10"; sleep 1
		if [ -d /home/pi/iothoneypot/RIOT ]
			then
				#Remove RIOT folder
				sudo rm -Rf /home/pi/iothoneypot/RIOT
			fi
		echo "20"; sleep 1
		#Download RIOT (docker version)
		#sudo docker pull riot/riotbuild
		echo "40"; sleep 1
		#clone RIOT github
		git clone https://github.com/RIOT-OS/RIOT.git
		echo "50"; sleep 1
		#Start RIOT docker version. ARM toolchain is missing. If found, install and run the next line.
		#sudo make BUILD_IN_DOCKER=1 DOCKER="sudo docker"
		echo "90";
		#Run RIOT in the background and in a container listen in USER selected PORT, and redirected to port 9999 inside container
		#sudo sh -c "docker run --publish $IOT_PORT:9999/tcp riot > /var/log/riot_run.log 2>&1 &"
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="RIOT installation" \
       		 --text="Installing RIOT" \
       		 --percentage=0
		check_error 'RIOT installation'
	)
}

RIOT_iot_devices()
{
	(
		echo "10"; sleep 1
		#copy IoT folder (GitHub) to RIOT
		cp -R /home/pi/iothoneypot/IoT_Honeypot /home/pi/iothoneypot/RIOT/IoT_Honeypot
		echo "20"; sleep 1
		#compile IoT devices
		make -C /home/pi/iothoneypot/RIOT/IoT_Honeypot/
		echo "50"; sleep 1
		#create interfaces for IoT devices
		sudo /home/pi/iothoneypot/RIOT/dist/tools/tapsetup/tapsetup -c
		echo "70"; sleep 1
		#visual confirmation to the user about new interfaces created
		ifconfig | grep tap | zenity --text-info --title="IoT devices interfaces confirmation" --width 1000 --height 200
		/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0 | zenity --text-info --title="IoT device 1 execution confirmation" --width 1000 --height 400 &
		/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1 | zenity --text-info --title="IoT device 2 execution confirmation" --width 1000 --height 400 &
		#Configuration for docker RIOT ->
		#Get the container ID from RIOT instance
		#containerid2=$(sudo docker ps | sed -n '3 p' | sed 's/^\(............\).*/\1/;q')
		#echo "30"; sleep 1
		#Connect to a bash session inside RIOT docker instance
		#sudo docker exec -it $containerid2 /bin/bash
		#echo "40"; sleep 1
		#
		#exit
		#sudo docker restart $containerid2
		#ADD aliases to Bashrc to fast execution of tap devices (IoT devices):
		#Backup .Bashrc
		cp /home/pi/.bashrc /home/pi/.bashrc.bak
		echo "alias tap0='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0'" >> .bashrc
		echo "alias tap1='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1'" >> .bashrc
		echo "90";
	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="IoT devices configuration" \
       			--text="Installing and configuring IoT Virtual Devices" \
       			--percentage=0
		check_error 'IoT devices Installation'
	)
}

installation()
{
	#Raspberry Pi comes with SSH port deactivated by default
	activate_ssh

	#Modify SSH port
	modify_ssh_port

	#Update and upgrade function
	update_upgrade

	#Install and configure Docker
	docker_install

	#Install Cowrie - Docker version
	cowrie_ARM_install

	#Cowrie, special configurations - Docker version
	cowrie_ARM_config

	#Install Cowrie - no Docker version
	#cowrie_install_no_docker

	#Cowrie, special configurations - no Docker version
	#cowrie_config_no_docker

	#Get port for IoT devices
	RIOT_iot_port

	#RIOT installation
	RIOT_install

	#RIOT configuration for IoT Devices
	RIOT_iot_devices
}

installation_stop()
{
        zenity 	--info \
								--title="Stopped" \
								--text="More info:  http://www.darkdefense.net" \
								--width=300 \
								--height=100
}

installation_finished()
{
        zenity 	--info \
								--title="Finished!" \
								--text="Now. Docker is working, SSH honeypot working. IoT honeypot working with 2 Iot Devices running. One of them has the port $IOT_PORT. Instalon successfully finished." \
								--width=300 \
								--height=200
}

initial_warning()
{
	zenity 	--text-info \
       		--title="README" \
       		--width=$W \
       		--height=$H \
       		--filename=$FILE \
       		--checkbox="I read and accept the terms."

	case $? in
    		0)
        		installation
			;;
    		1)
        		installation_stop
			;;
    		-1)
        		echo "An unexpected error has occurred."
			;;
	esac
}

#First, check if the script was run as sudo, and if platform is 64 bit. If not, exit.
check_sudo
check_platform

#Installation LOG
logging

#Show the initial warning with general info and considerations of using the script
initial_warning

#Proccess completed successfully
installation_finished

echo "******************************************************************************************"
echo "Done!"
echo "The Honeypots are running in the background"
echo
echo "Check locally if SSH port is open with: nmap 127.0.0.1"
echo "Check locally if SSH port is accepting connections: ssh pi@127.0.0.1"
echo "Check from other device scanning the network and trying to connect to SSH an Telnet ports."
echo
echo "Check if 2 IoT devices are running, with these commands:"
echo "tap0"
echo "tap1"
echo "tap0 activates an interface of one virtual IoT device. The same with tap1."
echo "Once executed tap0 or tap1 or both, you will enter into the OS of the virtual IoT device."
echo "Once inside, type info (info about the device), or help for more Commands"
echo "more info in the file: /home/pi/iothoneypot/RIOT/IoT_Honeypot/README.md"
echo "------------------------------------------------------------------------------------------"
echo "To continue, press ENTER. Once you press it this terminal will close. To enter the above commands (tap0 or tap1), open a new terminal."
read -n 1 -s -r -p "Press any key to continue"
exit

#######################################################################################################
#.... STILL PENDING...:
# - Exit after Cancel button is pressed in any process. So far, only Cancel button in port selection...
#...is working. If Cancel is pressed, ask again to select a port.
# - Add IoT devices. Devices are configured and working, but assigning a port is still pending

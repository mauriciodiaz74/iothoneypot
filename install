#!/bin/bash

#Variables
FILE=`dirname $0`/CONSIDERATIONS.txt
MACHINE_TYPE=`uname -m`
USER=`whoami`
TOP_MARGIN=30
RIGHT_MARGIN=20
SCREEN_WIDTH=$(xwininfo -root | sed -n 's/.*Width: //p')
SCREEN_HEIGHT=$(xwininfo -root | sed -n 's/.*Height: //p')
W=$(( $SCREEN_WIDTH / 2 - $RIGHT_MARGIN ))
H=$(( $SCREEN_HEIGHT - 2 * $TOP_MARGIN ))

#Clean terminal
clear

logging()
#Log all installation commands output
{
	logging=/var/log/iothoneypot_install.log
	mkfifo ${logging}.pipe
	tee < ${logging}.pipe $logging &
	exec &> ${logging}.pipe
	rm ${logging}.pipe
}

check_sudo()
#Check if the script was started by a sudo user. If not EXIT.
{
	if (( $EUID != 0 ))
		then
			printf "\n"
			printf "WARNING:\n"
			printf "To use this script, you need to run it as root\n"
			printf "Please use: <sudo ./install>\n"
			printf "\n"
			exit
	fi
}

check_platform()
#Check if the platform is supported. If not EXIT.
{
	if [ ${MACHINE_TYPE} != 'armv7l' ]
		then
			printf "\n"
			printf "WARNING:\n"
			printf "This program do not support this plattform\n"
			printf "Visit http://www.darkdefense.net/own/iothoneypot/supported\n"
			printf "Sorry...\n"
			printf "\n"
			exit
	fi
}

check_error()
#Exit the program if there is an error (including cancelation button)
{
	if [[ $? -eq 1 ]]
		then
       		zenity --error \
			     			 --width=300 \
								 --height=50 \
       					 --text="Operation terminated in $1"
					exit 1
	fi
}

error_message()
{
	zenity 	--error \
					--width=300 \
					--height=50 \
					--text="$1"
}

info_message()
{
	zenity 	--info \
					--width=300 \
					--height=150 \
					--text="$1"
}

activate_ssh()
#Raspberry Pi port 22 activation
{
	(
		echo "20"; sleep 1
		#Enable SSH. By default is closed in Rapsberry Pi.
		systemctl enable ssh
		echo "50"; sleep 1
		systemctl start ssh
		echo "90";
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="SSH service" \
       		 --text="Enabling and starting SSH service..." \
       		 --percentage=0
		check_error 'SSH activation'
	)
}

activate_telnet()
#To enable Telnet port - not recommended -
{
	sudo apt-get -y install telnetd openbsd-inetd
	sudo /etc/init.d/openbsd-inetd restart
}

modify_ssh_port()
#User port selection to use as the real SSH port (the fake SSH port will be the normal one: 22
{
	NEW_PORT=$(zenity --scale --width=300 --title="New SSH port" --text="Please select the new port where the real SSH service will be listening" --min-value=1035 --max-value=65535 --value=1035 --step=1)
	check_error 'SSH Port selection'
	#Modify sshd_config file to change default ssh port 22, to user selected port.
	sed -i 's/#Port/Port/g' /etc/ssh/sshd_config
	sed -i "s/Port.*/Port $NEW_PORT/g" /etc/ssh/sshd_config
	#Restart SSH service to apply port change
	service ssh restart
	#Show the new SSH port to the user
	ss -tlpn | grep ssh | (zenity --text-info --title="SSH port confirmation" --width 1000)
	check_error 'SSH Port confirmation'
}

update_upgrade()
#Update raspbian repositories and upgrade the system if necessary
{
	(
		echo "10"; sleep 1
		#Update system repositories
		sudo apt-get update
		echo "30"; sleep 1
		echo "60"; sleep 1
		#Upgrade packages
		sudo apt-get -y upgrade
		echo "90";
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="Updating" \
       		 --text="Updating repositories..." \
       		 --percentage=0
		check_error 'Update'
	)
}

removing_previous_docker()
#Stop and remove all docker containers images and volumes, and uninstall previous docker versions
{
	if [ -x "$(command -v docker)" ]
			then
				printf "Removing previous docker installation:\n"
				printf "Stopping containers\n"; docker container stop $(sudo docker container ls -aq)
				printf "Removing containers\n"; docker container prune --force; sleep 5
				printf "Removing images\n"; docker image prune --all --force; sleep 5
				printf "Removing docker system\n"; docker system prune --all --force --volumes; sleep 5
				printf "Uninstaling docker\n"; apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli containerd runc
				sleep 5
				printf "Cleaning cache\n"; apt-get autoremove -y --purge docker-engine docker docker.io docker-ce
				sleep 5
				printf "Removing related files\n"; rm -Rf /var/lib/docker /etc/docker
				printf "Removing related files\n"; rm -Rf /etc/apparmor.d/docker
				printf "Removing related files\n"; rm -Rf /var/run/docker.sock
				printf "Removing docker group\n"; groupdel docker
	fi
}

docker_install()
#Docker ARM version. Full instalation, configuration and activation
{
	(
		#Check if docker is installed. If installed, remove previous installation.
		removing_previous_docker
		echo "30"; sleep 1
		#Download docker installer script
		curl -fsSL https://get.docker.com -o get-docker.sh
		echo "50"; sleep 1
		#Run docker installer script
		sudo sh get-docker.sh
		echo "70"; sleep 1
		#Add current user to docker group
		sudo usermod -aG docker ${USER}
		echo "90";
		#Enable docker to start on boot with systemd
		sudo systemctl enable docker
	) |
	(
		zenity --progress \
       		 --width=300 \
       		 --height=100 \
       		 --title="Docker installation" \
       		 --text="Installing and configuring Docker..." \
       		 --percentage=0
		check_error 'Docker installation'
	)
	#Run Docker hello-world to test docker installation
	sudo docker run hello-world | zenity 	--text-info --width=900 --height=600 --title="Testing Docker"
	check_error 'Docker Hello-World'
}

logs_folder()
#Create log folder in Raspberry to attach it to containers in order to receive its logs
{
	if [ -d /var/log/iothoneypots ]
		then
			#Remove shared log folder if exist.
			printf "Removig previous shared log folder\n"; rm -Rf /var/log/iothoneypots
	fi
	#create shared log and change permissiones to it, to could use it insider container
	mkdir /var/log/iothoneypots
	#Files/Folders should be "not root" in order to use inside containers (also not root in the cowrie docker)
	chown pi:pi -R /var/log/iothoneypots
}

splunkforwarder_install()
#splunkforwarder installation and configuration to send logs to Splunk server
{
	if [ -d /opt/splunkforwarder ]
		then
			#Remove splunkforwarder if exist.
			printf "Removig previous splunkforwarder folder\n"; rm -Rf /opt/splunkforwarder
	fi
	if [ -f /opt/splunkforwarder-8.0.3-a6754d8441bf-Linux-arm.tgz ]
		then
			#Remove splunkforwarder compressed file
			printf "Removing previous splunkforwarder compressed file\n"; rm /opt/splunkforwarder-8.0.3-a6754d8441bf-Linux-arm.tgz
	fi
	if [ -f /opt/user-seed.conf ]
		then
			#Remove user-seed.conf
			printf "Removing previous user-seed file\n"; rm /opt/user-seed.conf
	fi
	#Download necessary files
	printf "Downloading splunk forwarder ARM version to use it with cowrie\n"; wget -O /opt/splunkforwarder-8.0.3-a6754d8441bf-Linux-arm.tgz http://www.darkdefense.net/own/iotsplunk/splunkforwarder-8.0.3-a6754d8441bf-Linux-arm.tgz
	printf "Unzipping splunk forwarder ARM version\n"; tar -xvzf /opt/splunkforwarder-8.0.3-a6754d8441bf-Linux-arm.tgz -C /opt
	printf "Downloading splunk forwarder credentials file\n"; wget -O /opt/user-seed.conf http://www.darkdefense.net/own/iotsplunk/user-seed.conf
	printf "Downloading splunk forwarder inputs file\n"; wget -O /opt/inputs.conf http://www.darkdefense.net/own/iotsplunk/inputs.conf
	printf "Downloading splunk forwarder outputs file\n"; wget -O /opt/outputs.conf http://www.darkdefense.net/own/iotsplunk/outputs.conf
	#Install splunkforwarder
	/opt/splunkforwarder/bin/./splunk start --accept-license --answer-yes --no-prompt
	sleep 3
	/opt/splunkforwarder/bin/./splunk stop
	sleep 3
	#Provide credentials and server configuration
	printf "Copying new user-seed\n"; cp /opt/user-seed.conf /opt/splunkforwarder/etc/system/local/
	#Configure inputs (json file) to send data to the splunkforwarder
	printf "Copying new inputs.conf\n"; cp /opt/inputs.conf /opt/splunkforwarder/etc/system/local/
	#Configure Splunk server data to the splunkforwarder
	printf "Configuring outputs in splunkforwarder:\n"; cp /opt/outputs.conf /opt/splunkforwarder/etc/system/local/
	sleep 1
	/opt/splunkforwarder/bin/./splunk start
	sleep 10
	#confirm installation
	printf "Splunk forwarder status:\n"; /opt/splunkforwarder/bin/./splunk status
	sleep 3
}

cowrie_ARM_install()
#Cowrie Docker - ARM version installation
{
	#To use local splunkforwarder to send data to Splunk server using local splunkforwarder, remove # in the next 2 lines.
	logs_folder  #Create logs folder to receive data from container.
	splunkforwarder_install #Install splunkforwarder using the previous created logs folder
	#
	#Download cowrie ARM version (jheredia cowrie docker)
	printf "Downloading Cowrie docker ARM version\n"; docker pull jtorresheredia/cowrie-arm
	#Run cowrie in the background and in a container listen in port 22, and redirected to port 2222 inside container
	printf "Starting cowrie docker container:\n"
	docker run 	--detach \
							--publish 22:2222/tcp \
							jtorresheredia/cowrie-arm
	sleep 10
}

cowrie_ARM_config()
#Configuration of cowrie Docker ARM version
{
	#Get the container ID from cowrie instance
	printf "Getting container ID.\n"; containerid=$(docker ps | sed -n '2 p' | sed 's/^\(............\).*/\1/;q')
	printf "Container ID is: $containerid\n"
	sleep 5
	#
	#Execute commands INSIDE  the container:
	#
	#A) Backup cowrie.cfg.dist to cowrie.cfg. The latter takes precedence over the first. Rename userdb to .txt for ssh honeypot access user/passwords.
	printf "Backup cowrie config file\n"; docker exec $containerid cp etc/cowrie.cfg.dist etc/cowrie.cfg
	#
	#B) Edit userdb file:
	#User and passwords file to fake SSH remote connections (SSH honeypot).
	printf "Using userdb user and passwords file\n"; docker exec $containerid mv etc/userdb.example etc/userdb.txt
	#Edit userdb.txt and change some passwords. You can add more passwords to this file (directly in the file).
	printf "Changing root password-1\n"; docker exec $containerid sed -i 's/root:x:!\/honeypot.*/root:x:!admin/' etc/userdb.txt
	printf "Changing root password-2\n"; docker exec $containerid sed -i 's/root:x:\*.*/root:x:toor/		' etc/userdb.txt
	#
	#C)Edit cowrie config file:
	#
	#C1) To change the default log to the shared log previously created and activated inside the container, remove the # in the next line.
	#echo "Executing command inside container"; docker exec $containerid sed -i 's/log_path.*/log_path = var\/log\/shared-log/' etc/cowrie.cfg
	#
	#C2) To enable TELNET honeypot (not recommended), port 23, uncomment the next two lines:
	#activate_telnet
	#sed -i '/# Enable Telnet support, disabled by default/{n;s/enable.*/enabled = true/}' etc/cowrie.cfg
	#
	#C3) Enable SPLUNK forwarding in output_splunk section (inside cowrie config file):
	#Line 1. Remove the # from the output_splunk line.
	printf "Modifying Cowrie conf -> splunk section\n"; docker exec $containerid sed -i 's/#\[output_splunk\]/\[output_splunk\]/' etc/cowrie.cfg
	#Line 2. Enable Splunk
	printf "Modifying Cowrie conf -> splunk section (enable)\n"; docker exec $containerid sed -i '/output_splunk/{n;s/#enabled.*/enabled = true/}' etc/cowrie.cfg
	#Line 3. Change localhost to the remote server address where Splunk is installed and running.
	printf "Modifying Cowrie conf -> splunk section (server IP)\n"; docker exec $containerid sed -i '/output_splunk/{n;n;s/#url = https:\/\/localhost:8088\/services.*$/url = https:\/\/34.89.20.96:8088\/services\/collector\/event/}' etc/cowrie.cfg
	#Line 4. Update the Token value from the HTTP event collector in Splunk remote server.
	printf "Modifying Cowrie conf -> splunk section (Token)\n"; docker exec $containerid sed -i '/output_splunk/{n;n;n;s/#token = 6A0EA6C6.*$/token = 202f2f26-27ee-4515-8c79-da687c736067/}' etc/cowrie.cfg
	#Lines 5, 6 and 7. Remove the # in the config file. These are optional and they depends of the Splunk Server Configuration.
	#printf "Modifying Cowrie conf -> splunk section (index)\n"; docker exec $containerid sed -i '/output_splunk/{n;n;n;n;s/#index.*/index = cowrie/}' etc/cowrie.cfg
	#printf "Modifying Cowrie conf -> splunk section (sourcetype)\n"; docker exec $containerid sed -i '/output_splunk/{n;n;n;n;n;s/#sourcetype.*/sourcetype = cowrie/}' etc/cowrie.cfg
	#printf "Modifying Cowrie conf -> splunk section (source)\n"; docker exec $containerid sed -i '/output_splunk/{n;n;n;n;n;n;s/#source.*/source = cowrie/}' etc/cowrie.cfg
	#
	#D) Restart container to apply changes.
	printf "Restarting container:\n"; docker restart $containerid
	sleep 15
	#D1) After container restarted, get the ID again (shouldn't have changed)
	printf "Getting container ID.\n"; containerid=$(docker ps | sed -n '2 p' | sed 's/^\(............\).*/\1/;q')
	printf "Container ID is: $containerid\n"
	sleep 5
	#add job to collect json file
	(crontab -u pi -l ; echo "* * * * * ( sleep 10 ; sudo docker cp $containerid:/cowrie/cowrie-git/var/log/cowrie/cowrie.json /var/log/iothoneypots)") | crontab -u pi -
	printf "Cronjob is:"; crontab -l
	sleep 3
}

RIOT_iot_port()
#Get from the user, the NEW port to IoT devices environment (only one port is needed). Can't be the same for the real SSH port (also user selected previously)
{
	IOT_PORT=$(zenity --scale --width=300 --title="First IoT device port" --text="Please select the port where one of the IoT devices will be listening" --min-value=1035 --max-value=65535 --value=1035 --step=1)
	check_error 'IoT port selection'
	if [ "$IOT_PORT" = "$NEW_PORT" ]
			then
						error_message "Please, choose another port, the selected port was previously chosen for SSH"
						RIOT_iot_port
			else
						info_message "New selected port for IoT was correctly applied"
	fi
}

RIOT_install()
# Install and configure RIOT
{
	(
		echo "30"; sleep 1
		#if RIOT folder exists, remove it first
		if [ -d /home/pi/iothoneypot/RIOT ]
			then
				#Remove RIOT folder
				rm -Rf /home/pi/iothoneypot/RIOT
			fi
		echo "90"; sleep 1
		#clone RIOT github
		git clone https://github.com/RIOT-OS/RIOT.git
	) |
	(
		zenity --progress \
       		 --width=500 \
       		 --height=100 \
       		 --title="RIOT installation" \
       		 --text="Installing RIOT" \
       		 --percentage=0
		check_error 'RIOT installation'
	)
}

RIOT_iot_devices()
#Installation and configuration of two virtual IoT devices
{
	(
		echo "10"; sleep 1
		#install ncat (netcat nmap version)
		apt-get install -y ncat
		#copy IoT folder (GitHub) to RIOT
		if [ -d /home/pi/iothoneypot/RIOT/IoT_Honeypot ]
			then
				#Remove RIOT folder
				rm -Rf /home/pi/iothoneypot/RIOT/IoT_Honeypot
			fi
		cp -R /home/pi/iothoneypot/IoT_Honeypot /home/pi/iothoneypot/RIOT/IoT_Honeypot
		echo "20"; sleep 1
		#compile IoT devices using the copied folder (with custom main.c)
		make -C /home/pi/iothoneypot/RIOT/IoT_Honeypot/
		echo "50"; sleep 1
		#create interfaces for IoT devices
		/home/pi/iothoneypot/RIOT/dist/tools/tapsetup/tapsetup -c
		echo "70"; sleep 1
		#visual confirmation to the user about new interfaces created
		ifconfig | grep tap | zenity --text-info --title="IoT devices interfaces confirmation" --width 1000 --height 200
		check_error 'IoT devices confirmation'
		/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0 | zenity --text-info --title="IoT device 1 execution confirmation" --width 1000 --height 400 &
		check_error 'IoT devices confirmation'
		sleep 5
		/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1 | zenity --text-info --title="IoT device 2 execution confirmation" --width 1000 --height 400 &
		check_error 'IoT devices confirmation'
		#Backup .Bashrc
		cp /home/pi/.bashrc /home/pi/.bashrc.bak
		#ADD aliases to Bashrc to fast execution of tap devices (IoT devices)
		printf "alias tap0='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0'\nalias tap1='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1'" >> /home/pi/.bashrc
		#echo "alias tap0='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0'" | tee -a /home/pi/.bashrc
		#echo "alias tap1='/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap1'" | tee -a /home/pi/.bashrc
		echo "90";
		#Activate tap0 in IoT_PORT
	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="IoT devices configuration" \
       			--text="Installing and configuring IoT Virtual Devices" \
       			--percentage=0
		check_error 'IoT devices Installation'
	)
}

activate_IoT_port()
{
			ncat -l -p $IOT_PORT -c "/home/pi/iothoneypot/RIOT/IoT_Honeypot/bin/native/./IoT_Honeypot.elf tap0" &
}

installation()
{
	#Raspberry Pi comes with SSH port deactivated by default
	activate_ssh

	#If you also want a Telner Honeypot, remove the # in the next line, BUT it is NOT recommended.
	#activate_telnet

	#Modify SSH port
	modify_ssh_port

	#Update and upgrade function
	update_upgrade

	#Install and configure Docker
	docker_install

	#Install Cowrie - Docker version
	cowrie_ARM_install

	#Cowrie, special configurations - Docker version
	cowrie_ARM_config

	#Get port for IoT devices
	RIOT_iot_port

	#RIOT installation.
	RIOT_install

	#RIOT configuration for IoT Devices.
	RIOT_iot_devices

}

initial_warning()
{
	zenity 	--text-info \
       		--title="CONSIDERATIONS" \
       		--width=$W \
       		--height=$H \
       		--filename=$FILE \
       		--checkbox="I read and accept the terms."

	case $? in
    		0)
        		installation
			;;
    		1)
        		check_error 'Initial considerations'
			;;
	esac
}

installation_finished()
{
    zenity 	--info \
						--title="Finished!" \
						--text="Now. Docker is working, SSH honeypot working. IoT honeypot working with 2 Iot Devices running. Installation successfully finished." \
						--width=300 \
						--height=200
		#Activation of IoT port
		activate_IoT_port
}

#First, check if the script was run as sudo, and if platform is 64 bit. If not, exit.
check_sudo
check_platform

#Installation LOG
logging

#Show the initial warning with general info and considerations of using the script
initial_warning

#Proccess completed successfully
installation_finished

printf "\n"
printf "******************************************************************************************\n"
printf "Done!\n"
printf "The Honeypots are running in the background\n"
printf "\n"
printf "Check locally if SSH port is open with: nmap 127.0.0.1\n"
printf "Check locally if SSH port is accepting connections: ssh pi@127.0.0.1\n"
printf "Check from other device scanning the network and trying to connect to SSH an Telnet ports.\n"
printf "\n"
printf "Check if 2 IoT devices are running, with these commands:\n"
printf "tap0\n"
printf "tap1\n"
printf "tap0 activates an interface of one virtual IoT device. The same with tap1.\n"
printf "Once executed tap0 or tap1 or both, you will enter into the OS of the virtual IoT device.\n"
printf "Once inside, type info (info about the device), or help for more Commands\n"
printf "more info in the file: /home/pi/iothoneypot/RIOT/IoT_Honeypot/README.md\n"
printf "==========================================================================================\n"
printf "PLEASE CLOSE THIS WINDOW. The above commands (tap0 or tap1) won't work in this one (open a new one).\n"
printf "==========================================================================================\n"
printf "******************************************************************************************\n"
printf "\n"
printf "\n"
exit

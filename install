#!/bin/bash

#Variables
FILE=`dirname $0`/README
MACHINE_TYPE=`uname -m`
export USER=`whoami`
TOP_MARGIN=30
RIGHT_MARGIN=20
SCREEN_WIDTH=$(xwininfo -root | sed -n 's/.*Width: //p')
SCREEN_HEIGHT=$(xwininfo -root | sed -n 's/.*Height: //p')
W=$(( $SCREEN_WIDTH / 2 - $RIGHT_MARGIN ))
H=$(( $SCREEN_HEIGHT - 2 * $TOP_MARGIN ))

#Clean terminal
clear

check_sudo()
{
	#Check if the script was started by a sudo user. If not EXIT.
	if (( $EUID != 0 ))
		then
			echo
			echo "WARNING:"
			echo "To use this script, you need to run it as sudo"
			echo "Please use: <sudo ./install>"
			echo
		exit
	fi
}

check_platform()
{
	#Check if the platform is supported. If not EXIT.
	if [ ${MACHINE_TYPE} != 'armv7l' ]
		then
			echo
			echo "WARNING:"
			echo "This program do not support this plattform"
			echo "Visit http://www.darkdefense.net/own/iothoneypot/supported"
			echo "Sorry..."
			echo
		exit
	fi
}

activate_ssh()
{
	(
		echo "20"; sleep 1
		#Enable SSH. By default is closed in Rapsberry Pi.
		systemctl enable ssh
		echo "50"; sleep 1
		echo "70"; sleep 1
		echo "90";
		systemctl start ssh
	) |
	(
		zenity 	--progress \
       			--width=300 \
       			--height=100 \
       			--title="SSH service" \
       			--text="Enabling and starting SSH service..." \
       			--percentage=0

		if [ "$?" = 1 ]
			then
        			zenity 	--error \
				      	--width=200 \
					--height=50 \
               				--text="Operation canceled."
		fi
	)
}

modify_ssh_port()
{
	NEW_PORT=$(zenity --scale --width=300 --title="New SSH port" --text="Please select the new port where the real SSH service will be listening" --min-value=1000 --max-value=65535 --value=1000 --step=1)
	#Modify sshd_config file to change default ssh port 22, to user selected port.
	sed -i 's/#Port/Port/g' /etc/ssh/sshd_config
	sed -i "s/Port.*/Port $NEW_PORT/g" /etc/ssh/sshd_config
	#Restart SSH service to apply port change
	service ssh restart
	#Show the new SSH port
	ss -tlpn | grep ssh | (zenity --text-info --title="SSH port confirmation" --width 1000
		if [ "$?" = 1 ]
			then modify_ssh_port
		fi
	)	
}

update_upgrade()
{
	(
		echo "10"; sleep 1
		#Update system repositories
		apt-get update
		echo "30"; sleep 1
		echo "60"; sleep 1
		echo "90";
		#Upgrade packages
		apt-get -y upgrade
	) |
	(
		zenity 	--progress \
       			--width=300 \
       			--height=100 \
       			--title="Updating" \
       			--text="Updating and upgrading system..." \
       			--percentage=0

		if [ "$?" = 1 ]
			then
        			zenity 	--error \
				      	--width=200 \
					--height=50 \
               				--text="Update canceled."
		fi
	)
}

docker_install()
{
	(
		echo "0"; sleep 1
		#Stop and remove all docker containers images and volumes
		docker system prune -af
		echo "10"; sleep 1
		#uninstall previous versions
		apt-get remove docker docker-engine docker.io containerd runc
		echo "30"; sleep 1
		#Download docker installer script
		curl -fsSL https://get.docker.com -o get-docker.sh
		echo "50"; sleep 1
		#Run docker installer script
		sh get-docker.sh
		echo "60"; sleep 1
		#Add current user to docker group
		usermod -aG docker ${USER}
		echo "90";
		#Enable docker to start on boot with systemd
		systemctl enable docker
	) |
	(
		zenity 	--progress \
       			--width=300 \
       			--height=100 \
       			--title="Docker installation" \
       			--text="Installing and configuring Docker..." \
       			--percentage=0

		if [ "$?" = 1 ]
			then
        			zenity 	--error \
				      	--width=200 \
					--height=50 \
               				--text="Update canceled."
		fi
	)
	#Run Docker hello-world to test docker installation
	sudo docker run hello-world | zenity --text-info \ 
					     --title="Testing Docker" \ 
					     --width 600 \
					     --height=300
}

cowrie_install()
{
	(
		echo "10"; sleep 1
		#Remove previous cowrie docker folder instalations
		sudo rm -rf docker-cowrie
		echo "20"; sleep 1
		#Install pre-requirements
		sudo apt install apt-utils
		echo "30"; sleep 1
		#Download Cowrie
		git clone https://github.com/cowrie/docker-cowrie.git
		echo "40"; sleep 1
		cd docker-cowrie
		echo "50"; sleep 1
		#Compile cowrie
		sudo docker build -t cowrie .
		echo "90";
		#Run cowrie in the background and in a container listen in port 22, and redirected to port 2222 inside container
		sudo docker run -p 22:2222/tcp cowrie &
		sudo docker ps
		
		sudo sed -i '/# Enable Telnet support, disabled by default/{n;s/enable.*/enabled = true/}' cowrie.cfg

	) |
	(
		zenity 	--progress \
       			--width=500 \
       			--height=100 \
       			--title="Cowrie installation" \
       			--text="Installing and configuring Cowrie. Patience, this may take a while..." \
       			--percentage=0

		if [ "$?" = 1 ]
			then
        			zenity 	--error \
				      	--width=200 \
					--height=50 \
               				--text="Update canceled."
		fi
	)
}

installation()
{
	#Raspberry Pi comes with SSH port deactivated by default
	activate_ssh

	#Modify SSH port
	modify_ssh_port

	#Update and upgrade function
	update_upgrade
	
	#Install and configure Docker
	docker_install
	
	#Install and configure Cowrie
	cowrie_install
}

installation_stop()
{
        zenity 	--info \
		--title="Stopped" \
		--text="More info:  http://www.darkdefense.net" \
		--width=300 \
		--height=100
}

installation_finished()
{
        zenity 	--info \
		--title="Finished!" \
		--text="Instalon successfully finished." \
		--width=300 \
		--height=100
}

initial_warning()
{
	zenity 	--text-info \
       		--title="README" \
       		--width=$W \
       		--height=$H \
       		--filename=$FILE \
       		--checkbox="I read and accept the terms."

	case $? in
    		0)
        		installation
			;;
    		1)
        		installation_stop
			;;
    		-1)
        		echo "An unexpected error has occurred."
			;;
	esac
}

#First, check if the script was run as sudo, and if platform is 64 bit. If not, exit.
check_sudo
check_platform

#Show the initial warning with general info and considerations of using the script
initial_warning

#Proccess completed successfully
installation_finished
echo
echo Done!
echo The Honeypot is running in the background
echo
jobs
echo
echo Check locally if SSH port is open with: nmap 127.0.0.1
echo Check locally if SSH port is accepting connections: ssh pi@127.0.0.1
echo Check from other device scanning the network and trying to connect to SSH an Telnet ports.
echo
exit 0

#######################################################################################################
#.... STILL PENDING...:
# - Exit after Cancel button is pressed in any process. So far, only Cancel button in port selection...
#...is working. If Cancel is pressed, ask again to select a port.
# - Add IoT devices. Devices are configured and working, but assigning a port is still pending
# - TELNET PORT availability.
